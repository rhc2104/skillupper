p
  |
    A Queen is a piece in chess that can go in a straight line or in a diagonal line.  In the diagram below, the Queen is located on row 2 and column 3.

= render partial: 'layouts/chessboard', locals: {show_visitable: false, existing_queens: [[2, 3]], questions: nil}
br
p
  |
    In the diagram below, the squares in yellow indicate the squares where the Queen may move to in a single turn.

= render partial: 'layouts/chessboard', locals: {show_visitable: true, existing_queens: [[2, 3]], questions: nil}
br

p
  |
    The eventual goal is to create a function that will determine the number of ways a Queen can be put in each row such that no Queen can move to any other Queen's spot in one turn.

p
  |
    Here is one example of 8 Queens placed in a standard 8 x 8 chessboard in such a manner:
= render partial: 'layouts/chessboard', locals: {show_visitable: false, existing_queens: [[0, 5], [1, 1], [2, 6], [3, 0], [4, 3], [5, 7], [6, 4], [7, 2]], questions: nil}
br

p
  |
    If it is assumed that an 8 x 8 chessboard is used, then it is known as the "8 Queens" problem.  We would like to solve this for chessboards of various sizes, which is known as the "N Queens" problem.
hr

p
  |
    One way to calculate all of the ways to place N Queens is to use brute force.
p
  |
    This would mean trying every combination of "one Queen per row".
p
  |
    However, this is not necessary.  For example, look at the diagram below.
= render partial: 'layouts/chessboard', locals: {show_visitable: false, existing_queens: [[0, 1], [1, 1]], questions: nil}
br
p
  |
    If we were to try every combination of "one Queen per row", we would continue to try to put 6 more Queens on the board in many different ways.  However, none of those combinations would succeed, because the first two Queens already make the placement invalid.
p
  |
    Thus, we will use a technique called
  strong<
    | recursive backtracking
  |
    .
  br
  strong>
    | Recursive:
  |
    every time we go to the next row to try placing another Queen, we make a recursive call.
  br
  strong>
    | Backtracking:
  |
    if the partial solution cannot be completed to form a valid solution, then we abandon the partial solution and backtrack.
p
  |
    In the diagram below, 2 Queens have been placed.  The squares where the two Queens can visit are in yellow- when it comes to placing a third Queen, the yellow squares can be ignored.  Thus, on row 2, the recursive backtracking solution would only consider columns 0, 5, 6, and 7.
= render partial: 'layouts/chessboard', locals: {show_visitable: true, existing_queens: [[0, 1], [1, 3]], questions: [[2, 0], [2, 5], [2, 6], [2, 7]]}
hr

p
  |
    As a first step, let's write a function called
  code<> data-var-camel="validateQueenPlacement"
  |
    that will determine if a Queen can be placed on a chessboard for a given row and column without allowing any other Queen to attack the new Queen. No other queens would share the same row, column, or diagonal as the new Queen.

p
  |
    After we build this function, we can use it to determine where the next Queen can be placed.

p
  |
    The first parameter is
  code<> data-var-camel="size"
  |
    and determines the size of the chessboard.  A standard chessboard is 8 x 8, so this value would be 8 for a standard chessboard.
p
  |
    The second parameter is
  code< data-var-camel="existingQueens"
  |
    , which is an array of Queen positions.  It is an array of arrays- the first value of the array is the row, and the second value is the column.
p
  |
    The third parameter is
  code< data-var-camel="newQueen"
  |
    , which is an array of where the new Queen would be placed.  It is an array- the first value is the row, and the second value is the column.

p
  | For example, the diagram below illustrates the following parameters:
p
  code
    = render partial: 'layouts/define_variable', locals: {variable_name_camel: 'size', variable: 8}
  br
  code
    = render partial: 'layouts/define_variable', locals: {variable_name_camel: 'existingQueens', variable: [[0, 5], [2, 6], [3, 0], [4, 3], [5, 7], [6, 4], [7, 2]]}
  br
  code
    = render partial: 'layouts/define_variable', locals: {variable_name_camel: 'newQueen', variable: [1, 1]}

= render partial: 'layouts/chessboard', locals: {show_visitable: false, existing_queens: [[0, 5], [2, 6], [3, 0], [4, 3], [5, 7], [6, 4], [7, 2]], questions: [[1, 1]]}
br

p
  code> data-var-camel="validateQueenPlacement"
  |
    would return
  code<>
    span class="language-specific javascript-specific" style="display: none;"
      = boolean_value(true, 'javascript')
    span class="language-specific python-specific" style="display: none;"
      = boolean_value(true, 'python')
  |
    in this case.
= render partial: 'layouts/editor', locals: {name: 'validateQueenPlacement', level: 'validate_queen_placement'}
