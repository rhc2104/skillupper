p
  |
    Now, please write a function called
  code<> data-var-camel="nQueens"
  |
    that returns the number of N Queens solutions for a chessboard of a given size.

p
  |
    For example, if
  code<> data-var-camel="size"
  |
    is 8, then 92 would be returned, because there are 92 possible solutions.

p
  |
    Since we have created
  code< data-var-camel="nextRowColumns"
  |
    , you would go row by row, and call
  code<> data-var-camel="nextRowColumns"
  |
    to get the columns in the next row to iterate on, and make a recursive call for each of those values.

p
  |
    In the diagram below, there are 4 choices to put another Queen in the next row.  Thus, 4 recursive calls would be made where a different one of those choices is added to the existing list of Queens.

= render partial: 'layouts/chessboard', locals: {show_visitable: true, existing_queens: [[0, 1], [1, 3]], questions: [[2, 0], [2, 5], [2, 6], [2, 7]]}
br

p
  |
    When a valid placement of Queens is completed on the last row, a counter should get incremented.  At the end, the value of the counter would be returned.

= render partial: 'layouts/editor', locals: {name: 'nQueens', level: 'n_queens'}
